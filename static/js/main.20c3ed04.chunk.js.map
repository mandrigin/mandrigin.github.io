{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Supply","supply","eth","substring","length","wei","className","style","color","fontSize","App","useState","blockNumber","setBlockNumber","undefined","state","setState","requestBody","JSON","stringify","jsonrpc","id","method","params","formNumber","setFormNumberInternal","setFormNumber","text","isNaN","useEffect","fetch","headers","body","then","r","json","error","code","Button","onClick","window","location","reload","Container","Card","Title","Body","result","Row","Col","md","Form","Control","type","value","placeholder","onChange","e","target","block","variant","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kTAuGMA,G,MAAS,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACVC,EAAMD,EAAOE,UAAU,EAAGF,EAAOG,OAAS,IAC1CC,EAAMJ,EAAOE,UAAUF,EAAOG,OAAO,GAAIH,EAAOG,QACtD,OACE,6BACC,0BAAME,UAAU,WAAU,4BAAI,0BAAMC,MAAO,CAACC,MAAO,WAAYN,GAAW,0BAAMK,MAAO,CAACE,SAAU,UAAWJ,GAAnF,YAKfK,EA7GH,WAAO,IAAD,EACsBC,mBAAS,UAD/B,mBACTC,EADS,KACIC,EADJ,OAEUF,wBAASG,GAFnB,mBAETC,EAFS,KAEFC,EAFE,KAIVC,EAAcC,KAAKC,UAAU,CACjCC,QAAS,MACTC,GAAI,EACJC,OAAQ,eACRC,OAAQ,CAACX,KARK,EAW4BD,mBAASC,GAXrC,mBAWTY,EAXS,KAWGC,EAXH,KAaVC,EAAgB,SAAAC,GACP,WAATA,GAICC,MAAMD,IAHTF,EAAsBE,IAqB1B,OAZAE,qBAAU,WACRC,MAAM,yBAA0B,CAC9BR,OAAQ,OACRS,QAAS,CACP,eAAgB,oBAElBC,KAAMf,IAEPgB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,KAAKjB,KACL,CAACC,SAEUH,IAAVC,EAEA,yBAAKT,UAAU,OACb,gDAKcQ,IAAhBC,EAAMqB,MAEN,yBAAK9B,UAAU,OACb,qCACA,oCAAUS,EAAMqB,MAAMC,MACtB,uCAAatB,EAAMqB,MAAN,SACb,kBAACE,EAAA,EAAD,CAAQC,QAAS,kBAAMC,OAAOC,SAASC,QAAO,KAA9C,YAMJ,yBAAKpC,UAAU,OACb,kBAACqC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAMtC,UAAU,kBACd,kBAACsC,EAAA,EAAKC,MAAN,CAAYvC,UAAU,QACpB,gDAEF,kBAACsC,EAAA,EAAKE,KAAN,KACE,0CACA,kBAAC,EAAD,CAAQ7C,OAAQc,EAAMgC,OAAN,SAChB,wBAAIzC,UAAU,WAAd,SACA,2BAAIS,EAAMgC,OAAN,cACJ,6BACA,qCACA,kBAACC,EAAA,EAAD,CAAK1C,UAAU,QACb,kBAAC2C,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAKC,QAAN,CAAcC,KAAK,OAAOC,MAAO9B,EAAY+B,YAAY,2BAA2BC,SAAU,SAAAC,GAAC,OAAI/B,EAAc+B,EAAEC,OAAOJ,WAE5H,kBAACL,EAAA,EAAD,OAEF,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACZ,EAAA,EAAD,CAAQqB,OAAK,EAACC,QAAQ,kBAAkBrB,QAAS,WAAO1B,EAAe,UAAWa,EAAc,YAAhG,WAEF,kBAACuB,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACZ,EAAA,EAAD,CAAQqB,OAAK,EAACpB,QAAS,kBAAM1B,EAAeW,KAA5C,4BAEF,kBAACyB,EAAA,EAAD,OAEF,6BACA,gDACA,8BAAOhC,GACP,6BACA,2CACA,2BAAG,uBAAG4C,KAAK,0EAAR,iDCnFOC,QACW,cAA7BtB,OAAOC,SAASsB,UAEe,UAA7BvB,OAAOC,SAASsB,UAEhBvB,OAAOC,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLwC,QAAQxC,MAAMA,EAAMyC,c","file":"static/js/main.20c3ed04.chunk.js","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport { Button, Card, Col, Container, Form, Row } from 'react-bootstrap';\nimport './App.css';\n\nconst App = () => {\n  const [blockNumber, setBlockNumber] = useState(\"latest\");\n  const [state, setState] = useState(undefined);\n\n  const requestBody = JSON.stringify({\n    jsonrpc: '2.0',\n    id: 1,\n    method: 'tg_getSupply',\n    params: [blockNumber]\n  });\n\n  const [formNumber, setFormNumberInternal] = useState(blockNumber);\n\n  const setFormNumber = text => {\n    if (text === 'latest') {\n      setFormNumberInternal(text)\n      return;\n    }\n    if (!isNaN(text)) {\n      setFormNumberInternal(text);\n      return;\n    }\n  }\n\n  useEffect(() => {\n    fetch('http://34.75.56.136:80', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: requestBody\n    })\n    .then(r => r.json())\n    .then(setState)\n  }, [requestBody])\n\n  if (state === undefined) {\n    return (\n      <div className=\"App\">\n        <h1>loading...</h1>\n      </div>\n    )\n  }\n\n  if (state.error !== undefined) {\n    return (\n      <div className=\"App\">\n        <h1>Error</h1>\n        <p>code: {state.error.code}</p>\n        <p>message: {state.error[\"message\"]}</p>\n        <Button onClick={() => window.location.reload(false)}>Refresh</Button>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n      <Card className=\"mt-4 shadow-lg\">\n        <Card.Title className=\"mt-4\">\n          <h1>ETH Supply Demo</h1>\n        </Card.Title>\n        <Card.Body>\n          <h3>ETH Supply</h3>\n          <Supply supply={state.result[\"supply\"]} />\n          <h5 className=\"size-bg\">Block</h5>\n          <p>{state.result[\"block_number\"]}</p>\n          <hr />\n          <h3>Check</h3>\n          <Row className=\"mb-2\">\n            <Col></Col>\n            <Col md={6}>\n              <Form.Control type=\"text\" value={formNumber} placeholder=\"block number or 'latest'\" onChange={e => setFormNumber(e.target.value) } />\n            </Col>\n            <Col></Col>\n          </Row>\n          <Row>\n            <Col></Col>\n            <Col md={2}>\n              <Button block variant=\"outline-primary\" onClick={() => {setBlockNumber(\"latest\"); setFormNumber(\"latest\")}}>latest</Button>\n            </Col>\n            <Col md={4}>\n              <Button block onClick={() => setBlockNumber(formNumber)}>check for another block</Button>\n            </Col>\n            <Col></Col>\n          </Row>\n          <hr />\n          <h3>JSON-RPC Request</h3>\n          <code>{requestBody}</code>\n          <hr />\n          <h3>Source code</h3>\n          <p><a href=\"https://github.com/mandrigin/turbo-api-examples/tree/master/cmd/supply\">github.com/mandrigin/turbo-api-examples</a></p>\n        </Card.Body>\n      </Card>\n      </Container>\n    </div>\n  );\n}\n\nconst Supply = ({supply}) => {\n const eth = supply.substring(0, supply.length - 18)\n const wei = supply.substring(supply.length-18, supply.length)\n return (\n   <div>\n    <code className=\"size-lg\"><h2><span style={{color: 'purple'}}>{eth}</span><span style={{fontSize: '0.8em'}}>{wei}</span> wei</h2></code>\n   </div>\n )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}